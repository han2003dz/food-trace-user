/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TraceabilityMerkleRegistry {
  export type MerkleBatchStruct = {
    root: BytesLike;
    fromEventId: BigNumberish;
    toEventId: BigNumberish;
    timestamp: BigNumberish;
    committer: AddressLike;
    exists: boolean;
  };

  export type MerkleBatchStructOutput = [
    root: string,
    fromEventId: bigint,
    toEventId: bigint,
    timestamp: bigint,
    committer: string,
    exists: boolean
  ] & {
    root: string;
    fromEventId: bigint;
    toEventId: bigint;
    timestamp: bigint;
    committer: string;
    exists: boolean;
  };
}

export interface TraceabilityMerkleRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batches"
      | "bindBatchCode"
      | "commitMerkleRoot"
      | "commitWithBatchCode"
      | "committer"
      | "getBatch"
      | "getBatchIdsByBatchCode"
      | "isEventIncluded"
      | "owner"
      | "pause"
      | "paused"
      | "rootSeen"
      | "setCommitter"
      | "totalBatches"
      | "transferOwnership"
      | "unpause"
      | "verifyWithRoot"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchCodeBound"
      | "CommitterChanged"
      | "OwnershipTransferred"
      | "Paused"
      | "RootCommitted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batches",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bindBatchCode",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitMerkleRoot",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitWithBatchCode",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "committer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchIdsByBatchCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isEventIncluded",
    values: [BytesLike, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootSeen", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setCommitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBatches",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyWithRoot",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "batches", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bindBatchCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitWithBatchCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "committer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchIdsByBatchCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEventIncluded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootSeen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyWithRoot",
    data: BytesLike
  ): Result;
}

export namespace BatchCodeBoundEvent {
  export type InputTuple = [
    batchCodeHash: BytesLike,
    batchId: BigNumberish,
    batchCode: string
  ];
  export type OutputTuple = [
    batchCodeHash: string,
    batchId: bigint,
    batchCode: string
  ];
  export interface OutputObject {
    batchCodeHash: string;
    batchId: bigint;
    batchCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitterChangedEvent {
  export type InputTuple = [
    oldCommitter: AddressLike,
    newCommitter: AddressLike
  ];
  export type OutputTuple = [oldCommitter: string, newCommitter: string];
  export interface OutputObject {
    oldCommitter: string;
    newCommitter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RootCommittedEvent {
  export type InputTuple = [
    batchId: BigNumberish,
    merkleRoot: BytesLike,
    fromEventId: BigNumberish,
    toEventId: BigNumberish,
    timestamp: BigNumberish,
    commiter: AddressLike
  ];
  export type OutputTuple = [
    batchId: bigint,
    merkleRoot: string,
    fromEventId: bigint,
    toEventId: bigint,
    timestamp: bigint,
    commiter: string
  ];
  export interface OutputObject {
    batchId: bigint;
    merkleRoot: string;
    fromEventId: bigint;
    toEventId: bigint;
    timestamp: bigint;
    commiter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TraceabilityMerkleRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): TraceabilityMerkleRegistry;
  waitForDeployment(): Promise<this>;

  interface: TraceabilityMerkleRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batches: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        root: string;
        fromEventId: bigint;
        toEventId: bigint;
        timestamp: bigint;
        committer: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  bindBatchCode: TypedContractMethod<
    [batchId: BigNumberish, batchCode: string],
    [void],
    "nonpayable"
  >;

  commitMerkleRoot: TypedContractMethod<
    [merkleRoot: BytesLike, fromEventId: BigNumberish, toEventId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  commitWithBatchCode: TypedContractMethod<
    [
      merkleRoot: BytesLike,
      fromEventId: BigNumberish,
      toEventId: BigNumberish,
      batchCode: string
    ],
    [bigint],
    "nonpayable"
  >;

  committer: TypedContractMethod<[], [string], "view">;

  getBatch: TypedContractMethod<
    [batchId: BigNumberish],
    [TraceabilityMerkleRegistry.MerkleBatchStructOutput],
    "view"
  >;

  getBatchIdsByBatchCode: TypedContractMethod<
    [batchCode: string],
    [bigint[]],
    "view"
  >;

  isEventIncluded: TypedContractMethod<
    [leaf: BytesLike, batchId: BigNumberish, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  rootSeen: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  setCommitter: TypedContractMethod<
    [newCommitter: AddressLike],
    [void],
    "nonpayable"
  >;

  totalBatches: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  verifyWithRoot: TypedContractMethod<
    [leaf: BytesLike, root: BytesLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batches"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, string, boolean] & {
        root: string;
        fromEventId: bigint;
        toEventId: bigint;
        timestamp: bigint;
        committer: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bindBatchCode"
  ): TypedContractMethod<
    [batchId: BigNumberish, batchCode: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitMerkleRoot"
  ): TypedContractMethod<
    [merkleRoot: BytesLike, fromEventId: BigNumberish, toEventId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commitWithBatchCode"
  ): TypedContractMethod<
    [
      merkleRoot: BytesLike,
      fromEventId: BigNumberish,
      toEventId: BigNumberish,
      batchCode: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "committer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBatch"
  ): TypedContractMethod<
    [batchId: BigNumberish],
    [TraceabilityMerkleRegistry.MerkleBatchStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchIdsByBatchCode"
  ): TypedContractMethod<[batchCode: string], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isEventIncluded"
  ): TypedContractMethod<
    [leaf: BytesLike, batchId: BigNumberish, proof: BytesLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rootSeen"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setCommitter"
  ): TypedContractMethod<[newCommitter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalBatches"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyWithRoot"
  ): TypedContractMethod<
    [leaf: BytesLike, root: BytesLike, proof: BytesLike[]],
    [boolean],
    "view"
  >;

  getEvent(
    key: "BatchCodeBound"
  ): TypedContractEvent<
    BatchCodeBoundEvent.InputTuple,
    BatchCodeBoundEvent.OutputTuple,
    BatchCodeBoundEvent.OutputObject
  >;
  getEvent(
    key: "CommitterChanged"
  ): TypedContractEvent<
    CommitterChangedEvent.InputTuple,
    CommitterChangedEvent.OutputTuple,
    CommitterChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RootCommitted"
  ): TypedContractEvent<
    RootCommittedEvent.InputTuple,
    RootCommittedEvent.OutputTuple,
    RootCommittedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BatchCodeBound(bytes32,uint256,string)": TypedContractEvent<
      BatchCodeBoundEvent.InputTuple,
      BatchCodeBoundEvent.OutputTuple,
      BatchCodeBoundEvent.OutputObject
    >;
    BatchCodeBound: TypedContractEvent<
      BatchCodeBoundEvent.InputTuple,
      BatchCodeBoundEvent.OutputTuple,
      BatchCodeBoundEvent.OutputObject
    >;

    "CommitterChanged(address,address)": TypedContractEvent<
      CommitterChangedEvent.InputTuple,
      CommitterChangedEvent.OutputTuple,
      CommitterChangedEvent.OutputObject
    >;
    CommitterChanged: TypedContractEvent<
      CommitterChangedEvent.InputTuple,
      CommitterChangedEvent.OutputTuple,
      CommitterChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RootCommitted(uint256,bytes32,uint256,uint256,uint64,address)": TypedContractEvent<
      RootCommittedEvent.InputTuple,
      RootCommittedEvent.OutputTuple,
      RootCommittedEvent.OutputObject
    >;
    RootCommitted: TypedContractEvent<
      RootCommittedEvent.InputTuple,
      RootCommittedEvent.OutputTuple,
      RootCommittedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
